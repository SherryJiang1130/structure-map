{"id":"libs/renderMind.ts","dependencies":[{"name":"C:\\Users\\jiangxueyan\\Desktop\\mind\\package.json","includedInParent":true,"mtime":1539846455631},{"name":"raphael","loc":{"line":6,"column":40},"parent":"C:\\Users\\jiangxueyan\\Desktop\\mind\\src\\libs\\renderMind.ts","resolved":"C:\\Users\\jiangxueyan\\Desktop\\mind\\node_modules\\raphael\\raphael.min.js"},{"name":"../libs/drawArr","loc":{"line":7,"column":24},"parent":"C:\\Users\\jiangxueyan\\Desktop\\mind\\src\\libs\\renderMind.ts","resolved":"C:\\Users\\jiangxueyan\\Desktop\\mind\\src\\libs\\drawArr.js"},{"name":"../libs/drag","loc":{"line":8,"column":37},"parent":"C:\\Users\\jiangxueyan\\Desktop\\mind\\src\\libs\\renderMind.ts","resolved":"C:\\Users\\jiangxueyan\\Desktop\\mind\\src\\libs\\drag\\index.ts"},{"name":"../libs/utils","loc":{"line":9,"column":22},"parent":"C:\\Users\\jiangxueyan\\Desktop\\mind\\src\\libs\\renderMind.ts","resolved":"C:\\Users\\jiangxueyan\\Desktop\\mind\\src\\libs\\utils\\index.js"}],"generated":{"js":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\n\nvar raphael_1 = __importDefault(require(\"raphael\"));\n\nvar drawArr_1 = require(\"../libs/drawArr\");\n\nvar drag_1 = __importDefault(require(\"../libs/drag\"));\n\nvar utils_1 = require(\"../libs/utils\");\n\nvar that = null;\n\nvar Renderer =\n/** @class */\nfunction () {\n  function Renderer(data, options) {\n    this.saveNode = []; //存储两个节点\n\n    this.startNode = null;\n    this.objCrr = null;\n    this.tempArrPath = []; //两个点连线时用于暂时存储起始节点到鼠标的线段\n\n    this.shapes = [];\n    this.texts = [];\n    this.connections = [];\n    this.basePosition = {\n      x: 500,\n      y: 100,\n      width: 60,\n      height: 40,\n      r: 4\n    };\n    this.obj = data;\n    this.options = options;\n    that = this;\n    this.createdNode();\n  }\n\n  Renderer.prototype.createdNode = function (obj) {\n    var _this = this;\n\n    this.shapes = [];\n    this.texts = [];\n    this.connections = [];\n    var renderDom = document.getElementById('raphael');\n\n    if (!obj) {\n      this.r = new raphael_1[\"default\"](renderDom);\n    }\n\n    this.options.isScroll ? utils_1.scrollFn(this.r) : '';\n    this.options.draggable ? this.draggable = new drag_1[\"default\"](this.r, this.connections, this.shapes, this.texts) : '';\n    this.obj.forEach(function (element, index) {\n      var offset = 0;\n\n      if (index > 0) {\n        offset = index * index * 50;\n      }\n\n      var randomNum = Math.round(Math.random() * 200);\n\n      _this.shapes.push(_this.r.rect(_this.basePosition.x + (index == 0 ? 0 : index % 2 == 0 ? randomNum : -randomNum), _this.basePosition.y + offset / (index > 0 ? index : 2), _this.basePosition.width, _this.basePosition.height, _this.basePosition.r));\n\n      _this.texts.push(_this.r.text(_this.basePosition.x + (index == 0 ? 0 : index % 2 == 0 ? randomNum : -randomNum) + 30, _this.basePosition.y + offset / (index > 0 ? index : 2) + 20, element.id));\n    }); // 添加样式和方法\n\n    this.addStyle(this.shapes, this.texts, this.obj); //存储节点间的顺序\n\n    this.shapes.forEach(function (ele, index) {\n      // collecConnections(shapes, index)\n      _this.loop(_this.shapes, ele, ele.id);\n    });\n  };\n\n  Renderer.prototype.addStyle = function (shapes, texts, data) {\n    //为节点添加样式和事件，并且绘制节点之间的箭头\n    for (var i = 0, ii = shapes.length; i < ii; i++) {\n      var color = raphael_1[\"default\"].getColor();\n      shapes[i].attr({\n        fill: color,\n        stroke: color,\n        'fill-opacity': 0.8,\n        'stroke-width': 2,\n        cursor: 'move'\n      });\n      texts[i].attr({\n        cursor: 'move'\n      });\n      shapes[i].id = data[i].id;\n      shapes[i][\"in\"] = data[i][\"in\"];\n      texts[i].id = data[i].id;\n\n      if (this.options.draggable) {\n        shapes[i].drag(this.draggable.move, this.draggable.dragger, this.draggable.up);\n        texts[i].drag(this.draggable.move, this.draggable.dragger, this.draggable.up);\n      }\n\n      shapes[i].dblclick(this.editText);\n      texts[i].dblclick(this.editText);\n    }\n  };\n\n  Renderer.prototype.collecConnections = function (obj1, obj2, r) {\n    this.connections.push(drawArr_1.drawArr({\n      obj1: obj1,\n      obj2: obj2\n    }, r));\n  };\n\n  Renderer.prototype.loop = function (data, obj, id) {\n    var _this = this;\n\n    var that = this;\n    data.forEach(function (ele) {\n      if (ele[\"in\"] && ele[\"in\"].indexOf(id) > -1) {\n        _this.collecConnections(obj, ele, that.r);\n      }\n    });\n  };\n\n  Renderer.prototype.rePaint = function (obj) {\n    that.clearMap();\n    that.obj = obj;\n    that.createdNode(obj);\n  };\n\n  Renderer.prototype.clearMap = function () {\n    this.r.clear();\n  };\n\n  Renderer.prototype.editText = function (event) {\n    if (event.target.nodeName == 'rect') {\n      console.log(event.target.nextSibling.childNodes[0].childNodes[0].nodeValue);\n    } else {\n      console.log(event.target.innerHTML);\n    }\n  };\n\n  return Renderer;\n}();\n\nexports[\"default\"] = Renderer;"},"hash":"923e33324217e60358af69f59dd5790f","cacheData":{"env":{}}}